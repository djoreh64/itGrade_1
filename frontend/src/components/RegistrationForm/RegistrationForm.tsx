import { useRef, type FC } from "react";
import styles from "./RegistrationForm.module.css";
import {
  validateEmail,
  validateFullName,
  validatePassword,
  validatePhone,
} from "@utils";
import { useRegistrationForm } from "./hooks/useRegistrationForm";
import SubmitResult from "@components/SubmitResult";
import useTheme from "@hooks/useTheme";

const RegistrationForm: FC = () => {
  const dialogRef = useRef<HTMLDialogElement>(null);
  const {
    register,
    handleSubmit,
    errors,
    isSubmitting,
    isValid,
    reset,
    avatarPreview,
    showPassword,
    setShowPassword,
    submitResult,
    onAvatarChange,
    onSubmit,
  } = useRegistrationForm(dialogRef);

  const openDialog = () => {
    dialogRef.current?.showModal();
    if (submitResult !== null) reset();
  };

  const closeDialog = () => dialogRef.current?.close();

  const { toggleTheme } = useTheme();

  return (
    <>
      <button type="button" onClick={toggleTheme} className={styles.openBtn}>
        ‚òÄÔ∏è
      </button>
      <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à —Å–∞–π—Ç</h1>
      <p>–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É</p>
      <button type="button" onClick={openDialog} className={styles.openBtn}>
        –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      </button>

      <dialog ref={dialogRef} className={styles.dialog}>
        <button
          type="button"
          aria-label="–ó–∞–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É"
          onClick={closeDialog}
          className={styles.closeBtn}
        >
          &times;
        </button>

        <form
          onSubmit={handleSubmit(onSubmit)}
          className={styles.form}
          noValidate
          encType="multipart/form-data"
        >
          <div className={styles.group}>
            <label htmlFor="login" className={styles.label}>
              –õ–æ–≥–∏–Ω
            </label>
            <input
              id="login"
              {...register("login", {
                required: "–õ–æ–≥–∏–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
                pattern: {
                  value: /^[a-zA-Z0-9]{3,}$/,
                  message: "–ú–∏–Ω–∏–º—É–º 3 –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã",
                },
              })}
              className={`${styles.input} ${
                errors.login ? styles.inputError : ""
              }`}
              disabled={isSubmitting}
              autoComplete="username"
            />
            {errors.login && (
              <div className={styles.errorMessage}>{errors.login.message}</div>
            )}
          </div>

          <div className={styles.group}>
            <label htmlFor="password" className={styles.label}>
              –ü–∞—Ä–æ–ª—å
            </label>
            <div className={styles.passwordWrapper}>
              <input
                id="password"
                type={showPassword ? "text" : "password"}
                {...register("password", {
                  required: "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
                  validate: validatePassword,
                })}
                className={`${styles.input} ${
                  errors.password ? styles.inputError : ""
                }`}
                disabled={isSubmitting}
                autoComplete="new-password"
              />
              <button
                type="button"
                aria-label={showPassword ? "–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å" : "–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å"}
                onClick={() => setShowPassword((v) => !v)}
                className={styles.togglePasswordBtn}
                tabIndex={-1}
                disabled={isSubmitting}
              >
                {showPassword ? "üôà" : "üëÅ"}
              </button>
            </div>
            {errors.password && (
              <div className={styles.errorMessage}>
                {errors.password.message}
              </div>
            )}
          </div>

          <div className={styles.group}>
            <label htmlFor="fullName" className={styles.label}>
              –§.–ò.–û.
            </label>
            <input
              id="fullName"
              {...register("fullName", {
                required: "–§–ò–û –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
                validate: validateFullName,
              })}
              className={`${styles.input} ${
                errors.fullName ? styles.inputError : ""
              }`}
              disabled={isSubmitting}
            />
            {errors.fullName && (
              <div className={styles.errorMessage}>
                {errors.fullName.message}
              </div>
            )}
          </div>

          <div className={styles.group}>
            <label htmlFor="email" className={styles.label}>
              E-Mail
            </label>
            <input
              id="email"
              type="email"
              {...register("email", {
                required: "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
                validate: validateEmail,
              })}
              className={`${styles.input} ${
                errors.email ? styles.inputError : ""
              }`}
              disabled={isSubmitting}
              autoComplete="email"
            />
            {errors.email && (
              <div className={styles.errorMessage}>{errors.email.message}</div>
            )}
          </div>

          <div className={styles.group}>
            <label htmlFor="phone" className={styles.label}>
              –¢–µ–ª–µ—Ñ–æ–Ω
            </label>
            <input
              id="phone"
              type="tel"
              placeholder="+7 (___) ___-__-__"
              {...register("phone", {
                required: "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
                validate: validatePhone,
              })}
              className={`${styles.input} ${
                errors.phone ? styles.inputError : ""
              }`}
              disabled={isSubmitting}
            />
            {errors.phone && (
              <div className={styles.errorMessage}>{errors.phone.message}</div>
            )}
          </div>

          <div className={styles.group}>
            <label htmlFor="about" className={styles.label}>
              –û —Å–µ–±–µ
            </label>
            <textarea
              id="about"
              rows={3}
              {...register("about", { required: "–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" })}
              className={`${styles.input} ${styles.textarea} ${
                errors.about ? styles.inputError : ""
              }`}
              disabled={isSubmitting}
            />
            {errors.about && (
              <div className={styles.errorMessage}>{errors.about.message}</div>
            )}
          </div>

          <div className={styles.group}>
            <label htmlFor="avatar" className={styles.label}>
              –ê–≤–∞—Ç–∞—Ä
            </label>
            <input
              id="avatar"
              type="file"
              accept="image/jpeg,image/png,image/webp"
              {...register("avatar")}
              className={styles.input}
              disabled={isSubmitting}
              onChange={(e) => onAvatarChange(e.target.files)}
            />
            {avatarPreview && (
              <img
                src={avatarPreview}
                alt="–ü—Ä–µ–≤—å—é –∞–≤–∞—Ç–∞—Ä–∞"
                style={{
                  marginTop: 10,
                  maxWidth: 150,
                  maxHeight: 150,
                  borderRadius: 6,
                }}
              />
            )}
          </div>

          <button
            type="submit"
            className={styles.submitBtn}
            disabled={isSubmitting || !isValid}
          >
            {isSubmitting ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
          </button>
        </form>
      </dialog>

      {submitResult && submitResult.success && (
        <SubmitResult submitResult={submitResult} />
      )}

      {submitResult && !submitResult.success && (
        <div className={styles.errorMessage}>
          {submitResult.errors?.global || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã"}
        </div>
      )}
    </>
  );
};

export default RegistrationForm;
