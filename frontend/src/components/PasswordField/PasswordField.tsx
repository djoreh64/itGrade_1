import type { FC } from "react";
import styles from "../RegistrationForm/RegistrationForm.module.css";
import { usePasswordStrength } from "@hooks/usePasswordStrength";
import { validatePassword } from "@utils/validate";

interface Props {
  register: any;
  errors: any;
  isSubmitting: boolean;
  showPassword: boolean;
  setShowPassword: React.Dispatch<React.SetStateAction<boolean>>;
  passwordValue: string;
}

const PasswordField: FC<Props> = ({
  register,
  errors,
  isSubmitting,
  showPassword,
  setShowPassword,
  passwordValue,
}) => {
  const { checks, strength } = usePasswordStrength(passwordValue);

  const getStrengthColor = (strength: number) => {
    if (strength >= 80) return "#4caf50";
    if (strength >= 50) return "#f0a500";
    return "#e55353";
  };
  const strengthColor = getStrengthColor(strength);

  return (
    <div className={styles.group}>
      <label htmlFor="password" className={styles.label}>
        –ü–∞—Ä–æ–ª—å
      </label>
      <div className={styles.passwordWrapper}>
        <input
          id="password"
          type={showPassword ? "text" : "password"}
          {...register("password", {
            required: "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
            validate: validatePassword,
          })}
          className={`${styles.input} ${
            errors.password ? styles.inputError : ""
          }`}
          disabled={isSubmitting}
          autoComplete="new-password"
        />
        <button
          type="button"
          aria-label={showPassword ? "–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å" : "–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å"}
          onClick={() => setShowPassword((v) => !v)}
          className={styles.togglePasswordBtn}
          tabIndex={-1}
          disabled={isSubmitting}
        >
          {showPassword ? "üôà" : "üëÅ"}
        </button>
      </div>

      <div className={styles.passwordStrengthWrapper}>
        <div className={styles.passwordProgressBar}>
          <div
            className={styles.passwordProgress}
            style={{ width: `${strength}%`, backgroundColor: strengthColor }}
          />
        </div>

        <div
          className={styles.passwordStrengthLabel}
          style={{ color: strengthColor }}
        >
          {strength >= 80 ? "–°–∏–ª—å–Ω—ã–π" : strength >= 50 ? "–°—Ä–µ–¥–Ω–∏–π" : "–°–ª–∞–±—ã–π"}
        </div>

        <ul className={styles.passwordChecklist}>
          <li className={checks.length ? styles.valid : ""}>
            –ù–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤
          </li>
          <li className={checks.lower ? styles.valid : ""}>–°—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞</li>
          <li className={checks.upper ? styles.valid : ""}>–ó–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞</li>
          <li className={checks.digit ? styles.valid : ""}>–¶–∏—Ñ—Ä–∞</li>
          <li className={checks.special ? styles.valid : ""}>–°–ø–µ—Ü—Å–∏–º–≤–æ–ª</li>
        </ul>
      </div>

      {errors.password && (
        <div className={styles.errorMessage}>{errors.password.message}</div>
      )}
    </div>
  );
};

export default PasswordField;
